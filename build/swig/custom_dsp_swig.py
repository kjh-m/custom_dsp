# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_custom_dsp_swig')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_custom_dsp_swig')
    _custom_dsp_swig = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_custom_dsp_swig', [dirname(__file__)])
        except ImportError:
            import _custom_dsp_swig
            return _custom_dsp_swig
        try:
            _mod = imp.load_module('_custom_dsp_swig', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _custom_dsp_swig = swig_import_helper()
    del swig_import_helper
else:
    import _custom_dsp_swig
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now() -> "gr::high_res_timer_type":
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _custom_dsp_swig.high_res_timer_now()

def high_res_timer_now_perfmon() -> "gr::high_res_timer_type":
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _custom_dsp_swig.high_res_timer_now_perfmon()

def high_res_timer_tps() -> "gr::high_res_timer_type":
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _custom_dsp_swig.high_res_timer_tps()

def high_res_timer_epoch() -> "gr::high_res_timer_type":
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _custom_dsp_swig.high_res_timer_epoch()
class pll_2nd_order_allout(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of custom_dsp::pll_2nd_order_allout.

    To avoid accidental use of raw pointers, custom_dsp::pll_2nd_order_allout's constructor is in a private implementation class. custom_dsp::pll_2nd_order_allout::make is the public interface for creating new instances.

    Args:
        w : 
        max_freq : 
        min_freq : 
        damp_c : 
        gain_set : 
        alpha : 
        beta : 
        lock_thr : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(w: 'float', max_freq: 'float', min_freq: 'float', damp_c: 'float', gain_set: 'short', alpha: 'float', beta: 'float', lock_thr: 'float') -> "gr::custom_dsp::pll_2nd_order_allout::sptr":
        """
        make(float w, float max_freq, float min_freq, float damp_c, short gain_set, float alpha, float beta, float lock_thr) -> pll_2nd_order_allout_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of custom_dsp::pll_2nd_order_allout.

        To avoid accidental use of raw pointers, custom_dsp::pll_2nd_order_allout's constructor is in a private implementation class. custom_dsp::pll_2nd_order_allout::make is the public interface for creating new instances.

        Args:
            w : 
            max_freq : 
            min_freq : 
            damp_c : 
            gain_set : 
            alpha : 
            beta : 
            lock_thr : 
        """
        return _custom_dsp_swig.pll_2nd_order_allout_make(w, max_freq, min_freq, damp_c, gain_set, alpha, beta, lock_thr)

    make = staticmethod(make)

    def lock_detector(self) -> "bool":
        """lock_detector(pll_2nd_order_allout self) -> bool"""
        return _custom_dsp_swig.pll_2nd_order_allout_lock_detector(self)


    def set_lock_threshold(self, arg2: 'float') -> "float":
        """set_lock_threshold(pll_2nd_order_allout self, float arg2) -> float"""
        return _custom_dsp_swig.pll_2nd_order_allout_set_lock_threshold(self, arg2)


    def set_loop_bandwidth(self, bw: 'float') -> "void":
        """set_loop_bandwidth(pll_2nd_order_allout self, float bw)"""
        return _custom_dsp_swig.pll_2nd_order_allout_set_loop_bandwidth(self, bw)


    def set_damping_factor(self, df: 'float') -> "void":
        """set_damping_factor(pll_2nd_order_allout self, float df)"""
        return _custom_dsp_swig.pll_2nd_order_allout_set_damping_factor(self, df)


    def set_alpha(self, alpha: 'float') -> "void":
        """set_alpha(pll_2nd_order_allout self, float alpha)"""
        return _custom_dsp_swig.pll_2nd_order_allout_set_alpha(self, alpha)


    def set_beta(self, beta: 'float') -> "void":
        """set_beta(pll_2nd_order_allout self, float beta)"""
        return _custom_dsp_swig.pll_2nd_order_allout_set_beta(self, beta)


    def set_frequency(self, freq: 'float') -> "void":
        """set_frequency(pll_2nd_order_allout self, float freq)"""
        return _custom_dsp_swig.pll_2nd_order_allout_set_frequency(self, freq)


    def set_phase(self, phase: 'float') -> "void":
        """set_phase(pll_2nd_order_allout self, float phase)"""
        return _custom_dsp_swig.pll_2nd_order_allout_set_phase(self, phase)


    def set_min_freq(self, freq: 'float') -> "void":
        """set_min_freq(pll_2nd_order_allout self, float freq)"""
        return _custom_dsp_swig.pll_2nd_order_allout_set_min_freq(self, freq)


    def set_max_freq(self, freq: 'float') -> "void":
        """set_max_freq(pll_2nd_order_allout self, float freq)"""
        return _custom_dsp_swig.pll_2nd_order_allout_set_max_freq(self, freq)


    def get_loop_bandwidth(self) -> "float":
        """get_loop_bandwidth(pll_2nd_order_allout self) -> float"""
        return _custom_dsp_swig.pll_2nd_order_allout_get_loop_bandwidth(self)


    def get_damping_factor(self) -> "float":
        """get_damping_factor(pll_2nd_order_allout self) -> float"""
        return _custom_dsp_swig.pll_2nd_order_allout_get_damping_factor(self)


    def get_alpha(self) -> "float":
        """get_alpha(pll_2nd_order_allout self) -> float"""
        return _custom_dsp_swig.pll_2nd_order_allout_get_alpha(self)


    def get_beta(self) -> "float":
        """get_beta(pll_2nd_order_allout self) -> float"""
        return _custom_dsp_swig.pll_2nd_order_allout_get_beta(self)


    def get_frequency(self) -> "float":
        """get_frequency(pll_2nd_order_allout self) -> float"""
        return _custom_dsp_swig.pll_2nd_order_allout_get_frequency(self)


    def get_phase(self) -> "float":
        """get_phase(pll_2nd_order_allout self) -> float"""
        return _custom_dsp_swig.pll_2nd_order_allout_get_phase(self)


    def get_min_freq(self) -> "float":
        """get_min_freq(pll_2nd_order_allout self) -> float"""
        return _custom_dsp_swig.pll_2nd_order_allout_get_min_freq(self)


    def get_max_freq(self) -> "float":
        """get_max_freq(pll_2nd_order_allout self) -> float"""
        return _custom_dsp_swig.pll_2nd_order_allout_get_max_freq(self)

    __swig_destroy__ = _custom_dsp_swig.delete_pll_2nd_order_allout
    __del__ = lambda self: None
pll_2nd_order_allout_swigregister = _custom_dsp_swig.pll_2nd_order_allout_swigregister
pll_2nd_order_allout_swigregister(pll_2nd_order_allout)

def pll_2nd_order_allout_make(w: 'float', max_freq: 'float', min_freq: 'float', damp_c: 'float', gain_set: 'short', alpha: 'float', beta: 'float', lock_thr: 'float') -> "gr::custom_dsp::pll_2nd_order_allout::sptr":
    """
    pll_2nd_order_allout_make(float w, float max_freq, float min_freq, float damp_c, short gain_set, float alpha, float beta, float lock_thr) -> pll_2nd_order_allout_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of custom_dsp::pll_2nd_order_allout.

    To avoid accidental use of raw pointers, custom_dsp::pll_2nd_order_allout's constructor is in a private implementation class. custom_dsp::pll_2nd_order_allout::make is the public interface for creating new instances.

    Args:
        w : 
        max_freq : 
        min_freq : 
        damp_c : 
        gain_set : 
        alpha : 
        beta : 
        lock_thr : 
    """
    return _custom_dsp_swig.pll_2nd_order_allout_make(w, max_freq, min_freq, damp_c, gain_set, alpha, beta, lock_thr)

class pll_2nd_order_allout_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::custom_dsp::pll_2nd_order_allout)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::custom_dsp::pll_2nd_order_allout)> self) -> pll_2nd_order_allout_sptr
        __init__(boost::shared_ptr<(gr::custom_dsp::pll_2nd_order_allout)> self, pll_2nd_order_allout p) -> pll_2nd_order_allout_sptr
        """
        this = _custom_dsp_swig.new_pll_2nd_order_allout_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self) -> "gr::custom_dsp::pll_2nd_order_allout *":
        """__deref__(pll_2nd_order_allout_sptr self) -> pll_2nd_order_allout"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr___deref__(self)

    __swig_destroy__ = _custom_dsp_swig.delete_pll_2nd_order_allout_sptr
    __del__ = lambda self: None

    def make(self, w: 'float', max_freq: 'float', min_freq: 'float', damp_c: 'float', gain_set: 'short', alpha: 'float', beta: 'float', lock_thr: 'float') -> "gr::custom_dsp::pll_2nd_order_allout::sptr":
        """
        make(pll_2nd_order_allout_sptr self, float w, float max_freq, float min_freq, float damp_c, short gain_set, float alpha, float beta, float lock_thr) -> pll_2nd_order_allout_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of custom_dsp::pll_2nd_order_allout.

        To avoid accidental use of raw pointers, custom_dsp::pll_2nd_order_allout's constructor is in a private implementation class. custom_dsp::pll_2nd_order_allout::make is the public interface for creating new instances.

        Args:
            w : 
            max_freq : 
            min_freq : 
            damp_c : 
            gain_set : 
            alpha : 
            beta : 
            lock_thr : 
        """
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_make(self, w, max_freq, min_freq, damp_c, gain_set, alpha, beta, lock_thr)


    def lock_detector(self) -> "bool":
        """lock_detector(pll_2nd_order_allout_sptr self) -> bool"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_lock_detector(self)


    def set_lock_threshold(self, arg2: 'float') -> "float":
        """set_lock_threshold(pll_2nd_order_allout_sptr self, float arg2) -> float"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_set_lock_threshold(self, arg2)


    def set_loop_bandwidth(self, bw: 'float') -> "void":
        """set_loop_bandwidth(pll_2nd_order_allout_sptr self, float bw)"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_set_loop_bandwidth(self, bw)


    def set_damping_factor(self, df: 'float') -> "void":
        """set_damping_factor(pll_2nd_order_allout_sptr self, float df)"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_set_damping_factor(self, df)


    def set_alpha(self, alpha: 'float') -> "void":
        """set_alpha(pll_2nd_order_allout_sptr self, float alpha)"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_set_alpha(self, alpha)


    def set_beta(self, beta: 'float') -> "void":
        """set_beta(pll_2nd_order_allout_sptr self, float beta)"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_set_beta(self, beta)


    def set_frequency(self, freq: 'float') -> "void":
        """set_frequency(pll_2nd_order_allout_sptr self, float freq)"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_set_frequency(self, freq)


    def set_phase(self, phase: 'float') -> "void":
        """set_phase(pll_2nd_order_allout_sptr self, float phase)"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_set_phase(self, phase)


    def set_min_freq(self, freq: 'float') -> "void":
        """set_min_freq(pll_2nd_order_allout_sptr self, float freq)"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_set_min_freq(self, freq)


    def set_max_freq(self, freq: 'float') -> "void":
        """set_max_freq(pll_2nd_order_allout_sptr self, float freq)"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_set_max_freq(self, freq)


    def get_loop_bandwidth(self) -> "float":
        """get_loop_bandwidth(pll_2nd_order_allout_sptr self) -> float"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_get_loop_bandwidth(self)


    def get_damping_factor(self) -> "float":
        """get_damping_factor(pll_2nd_order_allout_sptr self) -> float"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_get_damping_factor(self)


    def get_alpha(self) -> "float":
        """get_alpha(pll_2nd_order_allout_sptr self) -> float"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_get_alpha(self)


    def get_beta(self) -> "float":
        """get_beta(pll_2nd_order_allout_sptr self) -> float"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_get_beta(self)


    def get_frequency(self) -> "float":
        """get_frequency(pll_2nd_order_allout_sptr self) -> float"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_get_frequency(self)


    def get_phase(self) -> "float":
        """get_phase(pll_2nd_order_allout_sptr self) -> float"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_get_phase(self)


    def get_min_freq(self) -> "float":
        """get_min_freq(pll_2nd_order_allout_sptr self) -> float"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_get_min_freq(self)


    def get_max_freq(self) -> "float":
        """get_max_freq(pll_2nd_order_allout_sptr self) -> float"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_get_max_freq(self)


    def history(self) -> "unsigned int":
        """history(pll_2nd_order_allout_sptr self) -> unsigned int"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_history(self)


    def declare_sample_delay(self, *args) -> "void":
        """
        declare_sample_delay(pll_2nd_order_allout_sptr self, int which, int delay)
        declare_sample_delay(pll_2nd_order_allout_sptr self, unsigned int delay)
        """
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which: 'int') -> "unsigned int":
        """sample_delay(pll_2nd_order_allout_sptr self, int which) -> unsigned int"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_sample_delay(self, which)


    def set_output_multiple(self, multiple: 'int') -> "void":
        """set_output_multiple(pll_2nd_order_allout_sptr self, int multiple)"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_set_output_multiple(self, multiple)


    def output_multiple(self) -> "int":
        """output_multiple(pll_2nd_order_allout_sptr self) -> int"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_output_multiple(self)


    def relative_rate(self) -> "double":
        """relative_rate(pll_2nd_order_allout_sptr self) -> double"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_relative_rate(self)


    def relative_rate_i(self) -> "uint64_t":
        """relative_rate_i(pll_2nd_order_allout_sptr self) -> uint64_t"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_relative_rate_i(self)


    def relative_rate_d(self) -> "uint64_t":
        """relative_rate_d(pll_2nd_order_allout_sptr self) -> uint64_t"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_relative_rate_d(self)


    def start(self) -> "bool":
        """start(pll_2nd_order_allout_sptr self) -> bool"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_start(self)


    def stop(self) -> "bool":
        """stop(pll_2nd_order_allout_sptr self) -> bool"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_stop(self)


    def nitems_read(self, which_input: 'unsigned int') -> "uint64_t":
        """nitems_read(pll_2nd_order_allout_sptr self, unsigned int which_input) -> uint64_t"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output: 'unsigned int') -> "uint64_t":
        """nitems_written(pll_2nd_order_allout_sptr self, unsigned int which_output) -> uint64_t"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_nitems_written(self, which_output)


    def set_log_level(self, level: 'std::string') -> "void":
        """set_log_level(pll_2nd_order_allout_sptr self, std::string level)"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_set_log_level(self, level)


    def log_level(self) -> "std::string":
        """log_level(pll_2nd_order_allout_sptr self) -> std::string"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_log_level(self)


    def max_noutput_items(self) -> "int":
        """max_noutput_items(pll_2nd_order_allout_sptr self) -> int"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m: 'int') -> "void":
        """set_max_noutput_items(pll_2nd_order_allout_sptr self, int m)"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self) -> "void":
        """unset_max_noutput_items(pll_2nd_order_allout_sptr self)"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self) -> "bool":
        """is_set_max_noutput_items(pll_2nd_order_allout_sptr self) -> bool"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m: 'int') -> "void":
        """set_min_noutput_items(pll_2nd_order_allout_sptr self, int m)"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self) -> "int":
        """min_noutput_items(pll_2nd_order_allout_sptr self) -> int"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_min_noutput_items(self)


    def max_output_buffer(self, i: 'int') -> "long":
        """max_output_buffer(pll_2nd_order_allout_sptr self, int i) -> long"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args) -> "void":
        """
        set_max_output_buffer(pll_2nd_order_allout_sptr self, long max_output_buffer)
        set_max_output_buffer(pll_2nd_order_allout_sptr self, int port, long max_output_buffer)
        """
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i: 'int') -> "long":
        """min_output_buffer(pll_2nd_order_allout_sptr self, int i) -> long"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args) -> "void":
        """
        set_min_output_buffer(pll_2nd_order_allout_sptr self, long min_output_buffer)
        set_min_output_buffer(pll_2nd_order_allout_sptr self, int port, long min_output_buffer)
        """
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self) -> "float":
        """pc_noutput_items(pll_2nd_order_allout_sptr self) -> float"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self) -> "float":
        """pc_noutput_items_avg(pll_2nd_order_allout_sptr self) -> float"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self) -> "float":
        """pc_noutput_items_var(pll_2nd_order_allout_sptr self) -> float"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self) -> "float":
        """pc_nproduced(pll_2nd_order_allout_sptr self) -> float"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self) -> "float":
        """pc_nproduced_avg(pll_2nd_order_allout_sptr self) -> float"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self) -> "float":
        """pc_nproduced_var(pll_2nd_order_allout_sptr self) -> float"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_input_buffers_full(pll_2nd_order_allout_sptr self, int which) -> float
        pc_input_buffers_full(pll_2nd_order_allout_sptr self) -> pmt_vector_float
        """
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_input_buffers_full_avg(pll_2nd_order_allout_sptr self, int which) -> float
        pc_input_buffers_full_avg(pll_2nd_order_allout_sptr self) -> pmt_vector_float
        """
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_input_buffers_full_var(pll_2nd_order_allout_sptr self, int which) -> float
        pc_input_buffers_full_var(pll_2nd_order_allout_sptr self) -> pmt_vector_float
        """
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_output_buffers_full(pll_2nd_order_allout_sptr self, int which) -> float
        pc_output_buffers_full(pll_2nd_order_allout_sptr self) -> pmt_vector_float
        """
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_output_buffers_full_avg(pll_2nd_order_allout_sptr self, int which) -> float
        pc_output_buffers_full_avg(pll_2nd_order_allout_sptr self) -> pmt_vector_float
        """
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_output_buffers_full_var(pll_2nd_order_allout_sptr self, int which) -> float
        pc_output_buffers_full_var(pll_2nd_order_allout_sptr self) -> pmt_vector_float
        """
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self) -> "float":
        """pc_work_time(pll_2nd_order_allout_sptr self) -> float"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_pc_work_time(self)


    def pc_work_time_avg(self) -> "float":
        """pc_work_time_avg(pll_2nd_order_allout_sptr self) -> float"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self) -> "float":
        """pc_work_time_var(pll_2nd_order_allout_sptr self) -> float"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_pc_work_time_var(self)


    def pc_work_time_total(self) -> "float":
        """pc_work_time_total(pll_2nd_order_allout_sptr self) -> float"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self) -> "float":
        """pc_throughput_avg(pll_2nd_order_allout_sptr self) -> float"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask: 'std::vector< int,std::allocator< int > > const &') -> "void":
        """set_processor_affinity(pll_2nd_order_allout_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self) -> "void":
        """unset_processor_affinity(pll_2nd_order_allout_sptr self)"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_unset_processor_affinity(self)


    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        """processor_affinity(pll_2nd_order_allout_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_processor_affinity(self)


    def active_thread_priority(self) -> "int":
        """active_thread_priority(pll_2nd_order_allout_sptr self) -> int"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_active_thread_priority(self)


    def thread_priority(self) -> "int":
        """thread_priority(pll_2nd_order_allout_sptr self) -> int"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_thread_priority(self)


    def set_thread_priority(self, priority: 'int') -> "int":
        """set_thread_priority(pll_2nd_order_allout_sptr self, int priority) -> int"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_set_thread_priority(self, priority)


    def name(self) -> "std::string":
        """name(pll_2nd_order_allout_sptr self) -> std::string"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_name(self)


    def symbol_name(self) -> "std::string":
        """symbol_name(pll_2nd_order_allout_sptr self) -> std::string"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_symbol_name(self)


    def input_signature(self) -> "gr::io_signature::sptr":
        """input_signature(pll_2nd_order_allout_sptr self) -> io_signature_sptr"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_input_signature(self)


    def output_signature(self) -> "gr::io_signature::sptr":
        """output_signature(pll_2nd_order_allout_sptr self) -> io_signature_sptr"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_output_signature(self)


    def unique_id(self) -> "long":
        """unique_id(pll_2nd_order_allout_sptr self) -> long"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_unique_id(self)


    def to_basic_block(self) -> "gr::basic_block_sptr":
        """to_basic_block(pll_2nd_order_allout_sptr self) -> basic_block_sptr"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_to_basic_block(self)


    def check_topology(self, ninputs: 'int', noutputs: 'int') -> "bool":
        """check_topology(pll_2nd_order_allout_sptr self, int ninputs, int noutputs) -> bool"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_check_topology(self, ninputs, noutputs)


    def alias(self) -> "std::string":
        """alias(pll_2nd_order_allout_sptr self) -> std::string"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_alias(self)


    def set_block_alias(self, name: 'std::string') -> "void":
        """set_block_alias(pll_2nd_order_allout_sptr self, std::string name)"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_set_block_alias(self, name)


    def _post(self, which_port: 'swig_pmt_ptr', msg: 'swig_pmt_ptr') -> "void":
        """_post(pll_2nd_order_allout_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr__post(self, which_port, msg)


    def message_ports_in(self) -> "pmt::pmt_t":
        """message_ports_in(pll_2nd_order_allout_sptr self) -> swig_pmt_ptr"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_message_ports_in(self)


    def message_ports_out(self) -> "pmt::pmt_t":
        """message_ports_out(pll_2nd_order_allout_sptr self) -> swig_pmt_ptr"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_message_ports_out(self)


    def message_subscribers(self, which_port: 'swig_pmt_ptr') -> "pmt::pmt_t":
        """message_subscribers(pll_2nd_order_allout_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _custom_dsp_swig.pll_2nd_order_allout_sptr_message_subscribers(self, which_port)

pll_2nd_order_allout_sptr_swigregister = _custom_dsp_swig.pll_2nd_order_allout_sptr_swigregister
pll_2nd_order_allout_sptr_swigregister(pll_2nd_order_allout_sptr)


pll_2nd_order_allout_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pll_2nd_order_allout = pll_2nd_order_allout.make;

class square_ff(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of custom_dsp::square_ff.

    To avoid accidental use of raw pointers, custom_dsp::square_ff's constructor is in a private implementation class. custom_dsp::square_ff::make is the public interface for creating new instances.

    Args:
        scale : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(scale: 'float') -> "gr::custom_dsp::square_ff::sptr":
        """
        make(float scale) -> square_ff_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of custom_dsp::square_ff.

        To avoid accidental use of raw pointers, custom_dsp::square_ff's constructor is in a private implementation class. custom_dsp::square_ff::make is the public interface for creating new instances.

        Args:
            scale : 
        """
        return _custom_dsp_swig.square_ff_make(scale)

    make = staticmethod(make)

    def set_scale(self, scale: 'float') -> "void":
        """set_scale(square_ff self, float scale)"""
        return _custom_dsp_swig.square_ff_set_scale(self, scale)


    def get_scale(self) -> "float":
        """get_scale(square_ff self) -> float"""
        return _custom_dsp_swig.square_ff_get_scale(self)

    __swig_destroy__ = _custom_dsp_swig.delete_square_ff
    __del__ = lambda self: None
square_ff_swigregister = _custom_dsp_swig.square_ff_swigregister
square_ff_swigregister(square_ff)

def square_ff_make(scale: 'float') -> "gr::custom_dsp::square_ff::sptr":
    """
    square_ff_make(float scale) -> square_ff_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of custom_dsp::square_ff.

    To avoid accidental use of raw pointers, custom_dsp::square_ff's constructor is in a private implementation class. custom_dsp::square_ff::make is the public interface for creating new instances.

    Args:
        scale : 
    """
    return _custom_dsp_swig.square_ff_make(scale)

class square_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::custom_dsp::square_ff)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::custom_dsp::square_ff)> self) -> square_ff_sptr
        __init__(boost::shared_ptr<(gr::custom_dsp::square_ff)> self, square_ff p) -> square_ff_sptr
        """
        this = _custom_dsp_swig.new_square_ff_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self) -> "gr::custom_dsp::square_ff *":
        """__deref__(square_ff_sptr self) -> square_ff"""
        return _custom_dsp_swig.square_ff_sptr___deref__(self)

    __swig_destroy__ = _custom_dsp_swig.delete_square_ff_sptr
    __del__ = lambda self: None

    def make(self, scale: 'float') -> "gr::custom_dsp::square_ff::sptr":
        """
        make(square_ff_sptr self, float scale) -> square_ff_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of custom_dsp::square_ff.

        To avoid accidental use of raw pointers, custom_dsp::square_ff's constructor is in a private implementation class. custom_dsp::square_ff::make is the public interface for creating new instances.

        Args:
            scale : 
        """
        return _custom_dsp_swig.square_ff_sptr_make(self, scale)


    def set_scale(self, scale: 'float') -> "void":
        """set_scale(square_ff_sptr self, float scale)"""
        return _custom_dsp_swig.square_ff_sptr_set_scale(self, scale)


    def get_scale(self) -> "float":
        """get_scale(square_ff_sptr self) -> float"""
        return _custom_dsp_swig.square_ff_sptr_get_scale(self)


    def history(self) -> "unsigned int":
        """history(square_ff_sptr self) -> unsigned int"""
        return _custom_dsp_swig.square_ff_sptr_history(self)


    def declare_sample_delay(self, *args) -> "void":
        """
        declare_sample_delay(square_ff_sptr self, int which, int delay)
        declare_sample_delay(square_ff_sptr self, unsigned int delay)
        """
        return _custom_dsp_swig.square_ff_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which: 'int') -> "unsigned int":
        """sample_delay(square_ff_sptr self, int which) -> unsigned int"""
        return _custom_dsp_swig.square_ff_sptr_sample_delay(self, which)


    def set_output_multiple(self, multiple: 'int') -> "void":
        """set_output_multiple(square_ff_sptr self, int multiple)"""
        return _custom_dsp_swig.square_ff_sptr_set_output_multiple(self, multiple)


    def output_multiple(self) -> "int":
        """output_multiple(square_ff_sptr self) -> int"""
        return _custom_dsp_swig.square_ff_sptr_output_multiple(self)


    def relative_rate(self) -> "double":
        """relative_rate(square_ff_sptr self) -> double"""
        return _custom_dsp_swig.square_ff_sptr_relative_rate(self)


    def relative_rate_i(self) -> "uint64_t":
        """relative_rate_i(square_ff_sptr self) -> uint64_t"""
        return _custom_dsp_swig.square_ff_sptr_relative_rate_i(self)


    def relative_rate_d(self) -> "uint64_t":
        """relative_rate_d(square_ff_sptr self) -> uint64_t"""
        return _custom_dsp_swig.square_ff_sptr_relative_rate_d(self)


    def start(self) -> "bool":
        """start(square_ff_sptr self) -> bool"""
        return _custom_dsp_swig.square_ff_sptr_start(self)


    def stop(self) -> "bool":
        """stop(square_ff_sptr self) -> bool"""
        return _custom_dsp_swig.square_ff_sptr_stop(self)


    def nitems_read(self, which_input: 'unsigned int') -> "uint64_t":
        """nitems_read(square_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _custom_dsp_swig.square_ff_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output: 'unsigned int') -> "uint64_t":
        """nitems_written(square_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _custom_dsp_swig.square_ff_sptr_nitems_written(self, which_output)


    def set_log_level(self, level: 'std::string') -> "void":
        """set_log_level(square_ff_sptr self, std::string level)"""
        return _custom_dsp_swig.square_ff_sptr_set_log_level(self, level)


    def log_level(self) -> "std::string":
        """log_level(square_ff_sptr self) -> std::string"""
        return _custom_dsp_swig.square_ff_sptr_log_level(self)


    def max_noutput_items(self) -> "int":
        """max_noutput_items(square_ff_sptr self) -> int"""
        return _custom_dsp_swig.square_ff_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m: 'int') -> "void":
        """set_max_noutput_items(square_ff_sptr self, int m)"""
        return _custom_dsp_swig.square_ff_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self) -> "void":
        """unset_max_noutput_items(square_ff_sptr self)"""
        return _custom_dsp_swig.square_ff_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self) -> "bool":
        """is_set_max_noutput_items(square_ff_sptr self) -> bool"""
        return _custom_dsp_swig.square_ff_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m: 'int') -> "void":
        """set_min_noutput_items(square_ff_sptr self, int m)"""
        return _custom_dsp_swig.square_ff_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self) -> "int":
        """min_noutput_items(square_ff_sptr self) -> int"""
        return _custom_dsp_swig.square_ff_sptr_min_noutput_items(self)


    def max_output_buffer(self, i: 'int') -> "long":
        """max_output_buffer(square_ff_sptr self, int i) -> long"""
        return _custom_dsp_swig.square_ff_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args) -> "void":
        """
        set_max_output_buffer(square_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(square_ff_sptr self, int port, long max_output_buffer)
        """
        return _custom_dsp_swig.square_ff_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i: 'int') -> "long":
        """min_output_buffer(square_ff_sptr self, int i) -> long"""
        return _custom_dsp_swig.square_ff_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args) -> "void":
        """
        set_min_output_buffer(square_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(square_ff_sptr self, int port, long min_output_buffer)
        """
        return _custom_dsp_swig.square_ff_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self) -> "float":
        """pc_noutput_items(square_ff_sptr self) -> float"""
        return _custom_dsp_swig.square_ff_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self) -> "float":
        """pc_noutput_items_avg(square_ff_sptr self) -> float"""
        return _custom_dsp_swig.square_ff_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self) -> "float":
        """pc_noutput_items_var(square_ff_sptr self) -> float"""
        return _custom_dsp_swig.square_ff_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self) -> "float":
        """pc_nproduced(square_ff_sptr self) -> float"""
        return _custom_dsp_swig.square_ff_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self) -> "float":
        """pc_nproduced_avg(square_ff_sptr self) -> float"""
        return _custom_dsp_swig.square_ff_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self) -> "float":
        """pc_nproduced_var(square_ff_sptr self) -> float"""
        return _custom_dsp_swig.square_ff_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_input_buffers_full(square_ff_sptr self, int which) -> float
        pc_input_buffers_full(square_ff_sptr self) -> pmt_vector_float
        """
        return _custom_dsp_swig.square_ff_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_input_buffers_full_avg(square_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(square_ff_sptr self) -> pmt_vector_float
        """
        return _custom_dsp_swig.square_ff_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_input_buffers_full_var(square_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(square_ff_sptr self) -> pmt_vector_float
        """
        return _custom_dsp_swig.square_ff_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_output_buffers_full(square_ff_sptr self, int which) -> float
        pc_output_buffers_full(square_ff_sptr self) -> pmt_vector_float
        """
        return _custom_dsp_swig.square_ff_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_output_buffers_full_avg(square_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(square_ff_sptr self) -> pmt_vector_float
        """
        return _custom_dsp_swig.square_ff_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_output_buffers_full_var(square_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(square_ff_sptr self) -> pmt_vector_float
        """
        return _custom_dsp_swig.square_ff_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self) -> "float":
        """pc_work_time(square_ff_sptr self) -> float"""
        return _custom_dsp_swig.square_ff_sptr_pc_work_time(self)


    def pc_work_time_avg(self) -> "float":
        """pc_work_time_avg(square_ff_sptr self) -> float"""
        return _custom_dsp_swig.square_ff_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self) -> "float":
        """pc_work_time_var(square_ff_sptr self) -> float"""
        return _custom_dsp_swig.square_ff_sptr_pc_work_time_var(self)


    def pc_work_time_total(self) -> "float":
        """pc_work_time_total(square_ff_sptr self) -> float"""
        return _custom_dsp_swig.square_ff_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self) -> "float":
        """pc_throughput_avg(square_ff_sptr self) -> float"""
        return _custom_dsp_swig.square_ff_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask: 'std::vector< int,std::allocator< int > > const &') -> "void":
        """set_processor_affinity(square_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _custom_dsp_swig.square_ff_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self) -> "void":
        """unset_processor_affinity(square_ff_sptr self)"""
        return _custom_dsp_swig.square_ff_sptr_unset_processor_affinity(self)


    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        """processor_affinity(square_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _custom_dsp_swig.square_ff_sptr_processor_affinity(self)


    def active_thread_priority(self) -> "int":
        """active_thread_priority(square_ff_sptr self) -> int"""
        return _custom_dsp_swig.square_ff_sptr_active_thread_priority(self)


    def thread_priority(self) -> "int":
        """thread_priority(square_ff_sptr self) -> int"""
        return _custom_dsp_swig.square_ff_sptr_thread_priority(self)


    def set_thread_priority(self, priority: 'int') -> "int":
        """set_thread_priority(square_ff_sptr self, int priority) -> int"""
        return _custom_dsp_swig.square_ff_sptr_set_thread_priority(self, priority)


    def name(self) -> "std::string":
        """name(square_ff_sptr self) -> std::string"""
        return _custom_dsp_swig.square_ff_sptr_name(self)


    def symbol_name(self) -> "std::string":
        """symbol_name(square_ff_sptr self) -> std::string"""
        return _custom_dsp_swig.square_ff_sptr_symbol_name(self)


    def input_signature(self) -> "gr::io_signature::sptr":
        """input_signature(square_ff_sptr self) -> io_signature_sptr"""
        return _custom_dsp_swig.square_ff_sptr_input_signature(self)


    def output_signature(self) -> "gr::io_signature::sptr":
        """output_signature(square_ff_sptr self) -> io_signature_sptr"""
        return _custom_dsp_swig.square_ff_sptr_output_signature(self)


    def unique_id(self) -> "long":
        """unique_id(square_ff_sptr self) -> long"""
        return _custom_dsp_swig.square_ff_sptr_unique_id(self)


    def to_basic_block(self) -> "gr::basic_block_sptr":
        """to_basic_block(square_ff_sptr self) -> basic_block_sptr"""
        return _custom_dsp_swig.square_ff_sptr_to_basic_block(self)


    def check_topology(self, ninputs: 'int', noutputs: 'int') -> "bool":
        """check_topology(square_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _custom_dsp_swig.square_ff_sptr_check_topology(self, ninputs, noutputs)


    def alias(self) -> "std::string":
        """alias(square_ff_sptr self) -> std::string"""
        return _custom_dsp_swig.square_ff_sptr_alias(self)


    def set_block_alias(self, name: 'std::string') -> "void":
        """set_block_alias(square_ff_sptr self, std::string name)"""
        return _custom_dsp_swig.square_ff_sptr_set_block_alias(self, name)


    def _post(self, which_port: 'swig_pmt_ptr', msg: 'swig_pmt_ptr') -> "void":
        """_post(square_ff_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _custom_dsp_swig.square_ff_sptr__post(self, which_port, msg)


    def message_ports_in(self) -> "pmt::pmt_t":
        """message_ports_in(square_ff_sptr self) -> swig_pmt_ptr"""
        return _custom_dsp_swig.square_ff_sptr_message_ports_in(self)


    def message_ports_out(self) -> "pmt::pmt_t":
        """message_ports_out(square_ff_sptr self) -> swig_pmt_ptr"""
        return _custom_dsp_swig.square_ff_sptr_message_ports_out(self)


    def message_subscribers(self, which_port: 'swig_pmt_ptr') -> "pmt::pmt_t":
        """message_subscribers(square_ff_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _custom_dsp_swig.square_ff_sptr_message_subscribers(self, which_port)

square_ff_sptr_swigregister = _custom_dsp_swig.square_ff_sptr_swigregister
square_ff_sptr_swigregister(square_ff_sptr)


square_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
square_ff = square_ff.make;



